generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum City {
  Chandigarh
  Mohali
  Zirakpur
  Panchkula
  Other
}

enum PropertyType {
  Apartment
  Villa
  Plot
  Office
  Retail
}

enum BHK {
  Studio
  One      @map("1")
  Two      @map("2")
  Three    @map("3")
  Four     @map("4")
}

enum Purpose {
  Buy
  Rent
}

enum Timeline {
  ZeroToThree @map("0-3m")
  ThreeToSix  @map("3-6m")
  SixPlus     @map(">6m")
  Exploring
}

enum Source {
  Website
  Referral
  WalkIn   @map("Walk-in")
  Call
  Other
}

enum Status {
  New
  Qualified
  Contacted
  Visited
  Negotiation
  Converted
  Dropped
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyers       Buyer[]
  buyerHistory BuyerHistory[]
  sessions     Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model MagicLink {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@map("magic_links")
}

model Buyer {
  id           String      @id @default(uuid())
  fullName     String      @db.VarChar(80)
  email        String?     @db.VarChar(255)
  phone        String      @db.VarChar(15)
  city         City
  propertyType PropertyType
  bhk          BHK?
  purpose      Purpose
  budgetMin    Int?
  budgetMax    Int?
  timeline     Timeline
  source       Source
  status       Status      @default(New)
  notes        String?     @db.VarChar(1000)
  tags         String[]    @default([])
  ownerId      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  owner   User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  history BuyerHistory[]

  @@index([ownerId, status, updatedAt])
  @@index([ownerId, city, propertyType])
  @@index([phone])
  @@index([email])
  @@index([updatedAt])
  @@map("buyers")
}

model BuyerHistory {
  id        String   @id @default(uuid())
  buyerId   String
  changedBy String
  changedAt DateTime @default(now())
  diff      Json

  buyer     Buyer @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  changedByUser User @relation(fields: [changedBy], references: [id])

  @@index([buyerId, changedAt])
  @@map("buyer_history")
}
